### 열외 핸들러
**열외 핸들러**는, 액티비티내에 열외가 발생한 경우, 대응 처리를 기재한다.<br><br>
<img align="center" src="../images/Excluded_Handler.drawio.svg"><br>

### 수신 이벤트 액션
**수신 이벤트 액션**은, 특정 이벤트가 일어나기를 기다리는 액션이다. <br>
기다리는 이벤트가 시간에 관한 이벤트(ex. 매주 일요일 오전 0시에 발생등)가 있을 경우, 강제하기위해, 모래시계 아이콘을 기재한다.<br>
<img align="center" src="../images/Recieve_Event_Action.drawio.svg"><br>

### 송신 시그널 액션
**송신 시그널 액션**은, 다른 액티비티에서 받은 정보로부터, 시그널을 송신하는 액션이다. <br>
<img align="center" src="../images/Send Signal Action.drawio.svg"><br>

### 데이터 스토어 노드
**데이터 스토어 노드**는, 데이터베이스등 영속적 데이터가 보관될 수 있는 대상을 나타낸다. <br>
<img align="center" src="../images/Data Store Node.drawio.svg"><br>

### 확장영역
**확장영역**은, 복수의 입력치를 처리하기 위해 처리 부분을 둘러싼 영역이다. <br>
복수 입력치는 리스트 등 컬렉션 타입으로 만든다. 컬렉션의 처리방법에 따라, `parallel`, `iterativ`, `stream`의 3개의 모드가 있다.

#### parallel
 모드에 `parallel`이 지정된 경우, 컬렉션 각각 입력치가 평행처리 된다. 입력치의 숫자만큼 확장영역안 동작이 평행되어 실행된다.
 
#### iterative
 모드에 `iterative`가 지정된 경우, 컬렉션은 순차처리된다. 하나의 입력치 처리가 완료된 후 다음 처리가 실행된다.<br>
 처리에 출력치가 있을 경우, 입력치 순번으로 출력치가 컬렉션에 수납된다.

#### stream
 모드에 `stream`이 지정된 경우, 입력치에 대해 처리가 한번에 실행된다. 처리에 출력치가 있을 경우, 입력 컬렉션과 같은 구성으로 컬렉션을 구축한다. <br>
<img align="center" src="../images/Extend Area.drawio.svg"><br>

### 인터럽트 가능 액티비티 영역
 **인터럽트 가능 액티비티 영역**은, 그 영역 내 특정 조건이 발생한 경우, 수신이벤트 액션이 상황 발생을 탐지하여, 통상 흐름과 별도의 처리를 한다. <br>
<img align="center" src="../images/Interrupt Able.drawio.svg"><br>


## iv. Class Diagram
### 클래스 다이어그램 
-------------
<img align="center" src="../images/Class_Diagram/CD_component.drawio.png"/>

**클래스 다이어그램** (class diagram)에선, 클래스간의 관계에의해, 시스템의 정적인 구조를 나타낸다. 클래스란, 시스템을 구성하는 **오브젝트**(object)의 공통된 특징을 추출하여, 일반화한 것으로 <br>
오브젝트의 모형이라 말할 수 있다. <br>

일반적인 시스템은, 클래스를 정의하여, 클래스를 구상화하여 작성한 오브젝트가 각각 협조하는 것으로 동작한다. 클래스 다이어그램은 시스템의 정적인 구조를 대표하는 중요한 다이어그램이며, 분석, 설계같은<br>
시스템개발의 여러가지 공정에 이용된다.

#### 클래스 다이어그램의 예
-------------------------------
<img align="center" src="../images/Class_Diagram/CD_example.drawio.png"/> 



## 유스케이스
유스케이스란, 액터가 보는 시스템의 기능이다.
유스케이스는, 타원 안에 이름을 적어 기재하여 나타낸다. 유스케이스명은 타원 아래 적는 것도 가능하다. 또한 확장점(extension point)가 있을 경우는 타원 중앙에 선을 그어 상부에는 유스케이스명, 하부에는 확장점을 기재한다.
 타원이 아닌 직사각형 유스케이스를 표현하는 것도 가능하나, 이 경우 유스케이스의 상부에 키워드<<usecase>>를 추가하거나 직사각형 오른쪽위에 자그마하게 타원을 추가한다.
 
### 액터
**액터**는, 시스템을 조작하는 유저, 외부의 하드웨어(스캐너등 입출력장치가능), 대상의 시스템과 관련된 외부의 시스템을 나타낸다.
  액터는 주로 인형(봉 모양이기에 스틱맨이라 부른다. 한국에선 졸라맨이라하자.)으로 나타냈었으나, 직사각형에 <<actor>>라 추가하여 표기하거나 액터가 아닌 경우, 컴퓨터등 아이콘을 넣어도 된다.
  액터명에는 실제 이름을 넣는게 아니라 각 역할의 직업군을 넣어준다.
 
### 관련
 **관련**은, 액터와 유스케이스의 관계를 나타낸다. 액터와 유스케이스를 관련지을 때, 그 액터가 유스케이스를 실행하거나, <br>
 유스케이스로부터 반응을 얻을 수 있다.<br>
<img align="center" src="../images/Usecase_Diagram/usecase_related.svg"/>
 
### 범화
 **범화**를 쓰면, 액터끼리나 유스케이스끼리 공통부분을 추상화(일반화)할 수가 있습니다. 이것으로, 다이어그램을 심플하게 그릴 수 있다.
  예를들어, [일반직]과[관리직]이란 액터가 있을 경우, 사원으로써의 역활은 같기에, [사원]이라는 액터를 일반화할 수가 있다.
 <img align="center" src="../images/Usecase_Diagram/usecase_generalization.drawio.svg"/>
 
### 포함
 **포함**은 유스케이스의 다른 유스케이스를 포함할 수가 있다. 포함을 쓰면, 공통된기능 (조작순서) 를 표현한다.
 예를들면, [입금한다]란 유스케이스와, [인출한다]라는 유스케이스에, [금액을 지정한다]라는 유스케이스가 포함되었을 경우, 다음과 같이 그릴 수가 있다.
 포함은, 포함하는 유스케이스로부터 포함되는 유스케이스의 점선의 화살촉을 향해, 키워드 <<include>>을 추가한다.
 <img align="center" src="../images/Usecase_Diagram/usecase_include.drawio.svg"/>

### 확장
**확장**은, 이미 존재하는 유스케이스를, 다른 유스케이스를, 다른 유스케이스의 의해 확장할 경우 사용한다. 예를들면, [예금을 인출한다.]란 유스케이스를 실행 중에 임의의 조작으로부터<br>예금자의 선택으로 고액지폐의 일부를 환전할 때, [현금을 인출한다]란 유스케이스의 대하여, [일부환전한다]란 유스케이스의 의해 확장이 된다.<br>
 확장은 , 초안이되는 유스케이스에 대하여, **확장점**이라는 특정 시점에 이행이 됩니다. 이 례에는, 유스케이스 절차 중 하나인 [금액을 입력]할 때의 환전을 할까 말까의 분기점이 있으므로 [금액을입력] 부분의 확장이 된다. <br>
 실제로 확장을 행하는 타이밍으론, 시스템이 가동 중에 여러 기능등이 추가 되었을 때, 초안이 되었던 유스케이스에 기능을 추가할 때 사용할 수 있다.
 따라서 확장된 유스케이스와 초안이 된 유스케이스는 하나의 유스케이스로 봐도 된다.
 <img align="center" src="../images/Usecase_Diagram/usecase_extend.drawio.drawio.svg"/>
### 추가
 확장은 조건이 있을 경우, 조건을 기재할 수 있으며, 조건은 확장을 표시하는 <br>
 점선 도중에 동그라미를 그린 후 점선으로 노트를 추가하여 기재한다.<br>
 <img align="center" src="../images/Usecase_Diagram/usecase_plus.drawio.svg"/>
### 은행 ATM 유스케이스 다이어그램
--------------------------------------
<img align="center" src="../images/Usecase_Diagram/ATM_usecase.drawio.svg"/>
